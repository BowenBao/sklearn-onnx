
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorial\plot_fbegin_investigate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorial_plot_fbegin_investigate.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorial_plot_fbegin_investigate.py:


Intermediate results and investigation
======================================

.. index:: investigate, intermediate results

There are many reasons why a user wants more than using
the converted model into ONNX. Intermediate results may be
needed, the output of every node in the graph. The ONNX
may need to be altered to remove some nodes.
Transfer learning is usually removing the last layers of
a deep neural network. Another reaason is debugging.
It often happens that the runtime fails to compute the predictions
due to a shape mismatch. Then it is useful the get the shape
of every intermediate result. This example looks into two
ways of doing it.

.. contents::
    :local:

Look into pipeline steps
++++++++++++++++++++++++

The first way is a tricky one: it overloads
methods *transform*, *predict* and *predict_proba*
to keep a copy of inputs and outputs. It then goes
through every step of the pipeline. If the pipeline
has *n* steps, it converts the pipeline with step 1,
then the pipeline with steps 1, 2, then 1, 2, 3...

.. GENERATED FROM PYTHON SOURCE LINES 33-45

.. code-block:: default

    from pyquickhelper.helpgen.graphviz_helper import plot_graphviz
    from mlprodict.onnxrt import OnnxInference
    import numpy
    from onnxruntime import InferenceSession
    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler
    from sklearn.cluster import KMeans
    from sklearn.datasets import load_iris
    from skl2onnx import to_onnx
    from skl2onnx.helpers import collect_intermediate_steps
    from skl2onnx.common.data_types import FloatTensorType








.. GENERATED FROM PYTHON SOURCE LINES 46-47

The pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 47-57

.. code-block:: default


    data = load_iris()
    X = data.data

    pipe = Pipeline(steps=[
        ('std', StandardScaler()),
        ('km', KMeans(3))
    ])
    pipe.fit(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Pipeline(steps=[('std', StandardScaler()), ('km', KMeans(n_clusters=3))])



.. GENERATED FROM PYTHON SOURCE LINES 58-61

The function goes through every step,
overloads the methods *transform* and
returns an ONNX graph for every step.

.. GENERATED FROM PYTHON SOURCE LINES 61-65

.. code-block:: default

    steps = collect_intermediate_steps(
        pipe, "pipeline",
        [("X", FloatTensorType([None, X.shape[1]]))])








.. GENERATED FROM PYTHON SOURCE LINES 66-68

We call method transform to population the
cache the overloaded methods *transform* keeps.

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: default

    pipe.transform(X)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[0.21295824, 3.98940603, 3.12119834],
           [0.99604549, 4.01793312, 2.6755083 ],
           [0.65198444, 4.19343668, 2.97416665],
           [0.9034561 , 4.19784749, 2.88014429],
           [0.40215457, 4.11157152, 3.30022609],
           [1.21154793, 3.89893116, 3.50554424],
           [0.50244932, 4.21638048, 3.14856384],
           [0.09132468, 3.97313411, 2.99184826],
           [1.42174651, 4.40757189, 2.92515933],
           [0.78993078, 4.05764261, 2.79398956],
           [0.78999385, 3.92088109, 3.32125333],
           [0.27618123, 4.07853631, 3.0493632 ],
           [1.03497888, 4.16440431, 2.80635045],
           [1.33482453, 4.63069748, 3.21220972],
           [1.63865558, 4.14619343, 3.88834965],
           [2.39898792, 4.49547518, 4.4998303 ],
           [1.20748818, 4.02966144, 3.60978017],
           [0.21618828, 3.91388548, 3.05594182],
           [1.20986655, 3.72562039, 3.34493953],
           [0.86706182, 4.10101938, 3.50065397],
           [0.50401564, 3.66383713, 2.80825681],
           [0.66826437, 3.94496718, 3.27800809],
           [0.68658071, 4.51061335, 3.58990876],
           [0.47945627, 3.57996434, 2.55934697],
           [0.36345425, 3.98817445, 2.96493153],
           [0.99023912, 3.88431906, 2.55682739],
           [0.22683089, 3.79088782, 2.8279719 ],
           [0.2947186 , 3.89539875, 3.05970831],
           [0.25361098, 3.88085622, 2.95425291],
           [0.65019824, 4.09851673, 2.87745051],
           [0.80138328, 4.01796142, 2.73238773],
           [0.52309257, 3.57350896, 2.73361981],
           [1.57658655, 4.5037664 , 4.11853014],
           [1.87652483, 4.4465301 , 4.22845606],
           [0.76858489, 3.97906378, 2.71452112],
           [0.54896332, 4.01986385, 2.86508665],
           [0.63079314, 3.80064093, 3.0573692 ],
           [0.45982568, 4.25136846, 3.40284985],
           [1.2336976 , 4.42052558, 3.00742655],
           [0.14580827, 3.90865188, 2.95472117],
           [0.20261743, 4.01192633, 3.12324651],
           [2.67055552, 4.64398605, 2.90164193],
           [0.90927099, 4.42154566, 3.15411688],
           [0.50081008, 3.70483773, 2.8613548 ],
           [0.92159916, 3.9078554 , 3.34606471],
           [1.01946042, 4.01421067, 2.65231058],
           [0.86953764, 4.14238152, 3.53206587],
           [0.72275914, 4.23577398, 2.99813103],
           [0.72324305, 3.97409784, 3.34116935],
           [0.30295342, 3.97223984, 2.90222887],
           [3.43619989, 0.95288059, 1.9003878 ],
           [2.97232682, 0.99352148, 1.41851492],
           [3.51850037, 0.72661726, 1.68457079],
           [3.33264308, 2.69898424, 0.96940962],
           [3.35747592, 1.11074501, 0.9112523 ],
           [2.77550662, 1.8143491 , 0.35721918],
           [3.01808184, 1.00650285, 1.59351202],
           [2.77360088, 3.31296552, 1.50213315],
           [3.21148368, 1.14114175, 1.11632078],
           [2.66294828, 2.42994048, 0.77921299],
           [3.62389817, 3.73666782, 1.97194958],
           [2.70011145, 1.45918639, 0.77530513],
           [3.53658932, 2.74268279, 1.25941769],
           [2.98813829, 1.28976474, 0.66155141],
           [2.32311723, 2.05251547, 0.73833453],
           [3.14311522, 0.98780965, 1.46572707],
           [2.68234835, 1.67700171, 0.80185102],
           [2.63954211, 2.12682734, 0.568386  ],
           [3.97369206, 2.33743839, 1.19987895],
           [2.87494798, 2.46667974, 0.67881532],
           [3.03853641, 1.1880022 , 1.34222961],
           [2.8022861 , 1.63233668, 0.53061062],
           [3.68305664, 1.65142259, 0.79234309],
           [2.96833851, 1.54593744, 0.57371215],
           [2.9760862 , 1.2933375 , 0.90589785],
           [3.13002382, 1.03085926, 1.22490527],
           [3.56679427, 1.09304603, 1.26783271],
           [3.5903606 , 0.52050254, 1.42114042],
           [2.93839428, 1.34712856, 0.58974672],
           [2.58203512, 2.44164622, 0.76432091],
           [2.99796537, 2.69027665, 0.89738242],
           [2.92597852, 2.76965187, 0.98549851],
           [2.68907313, 2.02829879, 0.3921368 ],
           [3.42215998, 1.4211892 , 0.54223583],
           [2.62771445, 1.88799766, 0.90567816],
           [2.75915071, 1.39853465, 1.70872911],
           [3.30075052, 0.78009974, 1.48190142],
           [3.73017167, 2.2083069 , 1.06129323],
           [2.37943811, 1.87666989, 0.81863359],
           [2.98789866, 2.41035271, 0.599882  ],
           [2.89079656, 2.26782134, 0.4914813 ],
           [2.86642713, 1.25085451, 0.84409423],
           [2.86642575, 2.11791607, 0.38941349],
           [2.96966239, 3.35089399, 1.53271026],
           [2.77003779, 2.05312152, 0.30831638],
           [2.38255534, 1.83091351, 0.81726253],
           [2.55559903, 1.80454586, 0.56428027],
           [2.8455521 , 1.39825227, 0.72672271],
           [2.56987887, 3.06324547, 1.28805849],
           [2.64007308, 1.89861511, 0.38163798],
           [4.24274589, 1.0584579 , 2.31271244],
           [3.57067982, 1.5185265 , 0.76585766],
           [4.44150237, 0.52472   , 2.14762671],
           [3.69480186, 0.77236486, 1.17645413],
           [4.11613683, 0.53031563, 1.73594932],
           [5.03326801, 1.2022172 , 2.78128346],
           [3.3503222 , 2.74462238, 1.22550604],
           [4.577021  , 0.92275933, 2.2426558 ],
           [4.363498  , 1.40314162, 1.50462864],
           [4.79334275, 1.48323372, 3.22975724],
           [3.62749566, 0.4787491 , 1.71837714],
           [3.89360823, 1.0325986 , 1.10409694],
           [4.1132966 , 0.27818948, 1.80475907],
           [3.82688169, 1.91870424, 0.94858807],
           [3.91538879, 1.49910975, 1.39433359],
           [3.89835633, 0.68622715, 1.90677079],
           [3.70128288, 0.46463058, 1.39713702],
           [5.18341242, 2.10127163, 3.85224062],
           [5.58136629, 1.83092395, 2.95786451],
           [4.02615768, 2.37017622, 1.17790381],
           [4.31907679, 0.52540209, 2.27442972],
           [3.4288432 , 1.62249456, 0.91211061],
           [5.19031307, 1.47042293, 2.77937737],
           [3.64273089, 1.15814207, 0.84735471],
           [4.00723617, 0.520093  , 2.15695444],
           [4.2637671 , 0.66660166, 2.33581345],
           [3.45930032, 1.08324891, 0.79774043],
           [3.27575645, 0.94925151, 1.022307  ],
           [4.05342943, 0.84098317, 1.3842265 ],
           [4.1585729 , 0.75748198, 2.03854964],
           [4.71100584, 1.07124861, 2.28297732],
           [5.12224641, 2.17345728, 3.88774921],
           [4.13401784, 0.87682321, 1.47357101],
           [3.39830644, 1.11534598, 0.7964005 ],
           [3.63719075, 1.59782917, 0.80521086],
           [5.08776655, 1.25982873, 2.8607372 ],
           [4.00416552, 1.07214028, 2.3101089 ],
           [3.58815834, 0.51434392, 1.46990247],
           [3.19454679, 1.0762733 , 0.97017134],
           [4.09907253, 0.23050145, 1.97333575],
           [4.28416057, 0.57373487, 2.07939567],
           [4.17402084, 0.51130902, 2.06609741],
           [3.57067982, 1.5185265 , 0.76585766],
           [4.32128686, 0.54141867, 2.24723796],
           [4.3480018 , 0.85128501, 2.42521977],
           [4.1240495 , 0.52475835, 1.82594618],
           [3.97564407, 1.52100812, 1.03093862],
           [3.7539635 , 0.44371189, 1.44892686],
           [3.7969924 , 1.08437101, 2.17585453],
           [3.25638099, 1.13739231, 1.00508668]])



.. GENERATED FROM PYTHON SOURCE LINES 71-73

We compute every step and compare
ONNX and scikit-learn outputs.

.. GENERATED FROM PYTHON SOURCE LINES 73-93

.. code-block:: default


    for step in steps:
        print('----------------------------')
        print(step['model'])
        onnx_step = step['onnx_step']
        sess = InferenceSession(onnx_step.SerializeToString())
        onnx_outputs = sess.run(None, {'X': X.astype(numpy.float32)})
        onnx_output = onnx_outputs[-1]
        skl_outputs = step['model']._debug.outputs['transform']

        # comparison
        diff = numpy.abs(skl_outputs.ravel() - onnx_output.ravel()).max()
        print("difference", diff)

    # That was the first way: dynamically overwrite
    # every method transform or predict in a scikit-learn
    # pipeline to capture the input and output of every step,
    # compare them to the output produced by truncated ONNX
    # graphs built from the first one.
    #




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ----------------------------
    StandardScaler()
    difference 4.799262827148709e-07
    ----------------------------
    KMeans(n_clusters=3)
    difference 1.0955376477106427e-06




.. GENERATED FROM PYTHON SOURCE LINES 94-101

Python runtime to look into every node
++++++++++++++++++++++++++++++++++++++

The python runtime may be useful to easily look
into every node of the ONNX graph.
This option can be used to check when the computation
fails due to nan values or a dimension mismatch.

.. GENERATED FROM PYTHON SOURCE LINES 101-109

.. code-block:: default



    onx = to_onnx(pipe, X[:1].astype(numpy.float32))

    oinf = OnnxInference(onx)
    oinf.run({'X': X[:2].astype(numpy.float32)},
             verbose=1, fLOG=print)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    +ki='Ad_Addcst': (3,) (dtype=float32 min=0.9830552339553833 max=5.035177230834961)
    +ki='Ge_Gemmcst': (3, 4) (dtype=float32 min=-1.3049873113632202 max=1.1359702348709106)
    +ki='Mu_Mulcst': (1,) (dtype=float32 min=0.0 max=0.0)
    -- OnnxInference: run 8 nodes
    Onnx-Scaler(X) -> variable    (name='Scaler')
    +kr='variable': (2, 4) (dtype=float32 min=-1.340226411819458 max=1.0190045833587646)
    Onnx-ReduceSumSquare(variable) -> Re_reduced0    (name='Re_ReduceSumSquare')
    +kr='Re_reduced0': (2, 1) (dtype=float32 min=4.850505828857422 max=5.376197338104248)
    Onnx-Mul(Re_reduced0, Mu_Mulcst) -> Mu_C0    (name='Mu_Mul')
    +kr='Mu_C0': (2, 1) (dtype=float32 min=0.0 max=0.0)
    Onnx-Gemm(variable, Ge_Gemmcst, Mu_C0) -> Ge_Y0    (name='Ge_Gemm')
    +kr='Ge_Y0': (2, 3) (dtype=float32 min=-10.366023063659668 max=7.967349052429199)
    Onnx-Add(Re_reduced0, Ge_Y0) -> Ad_C01    (name='Ad_Add')
    +kr='Ad_C01': (2, 3) (dtype=float32 min=-4.98982572555542 max=12.817854881286621)
    Onnx-Add(Ad_Addcst, Ad_C01) -> Ad_C0    (name='Ad_Add1')
    +kr='Ad_C0': (2, 3) (dtype=float32 min=0.045351505279541016 max=16.14378547668457)
    Onnx-ArgMin(Ad_C0) -> label    (name='Ar_ArgMin')
    +kr='label': (2,) (dtype=int64 min=0 max=0)
    Onnx-Sqrt(Ad_C0) -> scores    (name='Sq_Sqrt')
    +kr='scores': (2, 3) (dtype=float32 min=0.2129589319229126 max=4.017932891845703)

    {'label': array([0, 0], dtype=int64), 'scores': array([[0.21295893, 3.9894059 , 3.1211984 ],
           [0.99604493, 4.017933  , 2.675508  ]], dtype=float32)}



.. GENERATED FROM PYTHON SOURCE LINES 110-111

And to get a sense of the intermediate results.

.. GENERATED FROM PYTHON SOURCE LINES 111-118

.. code-block:: default


    oinf.run({'X': X[:2].astype(numpy.float32)},
             verbose=3, fLOG=print)

    # This way is usually better if you need to investigate
    # issues within the code of the runtime for an operator.
    #




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    +ki='Ad_Addcst': (3,) (dtype=float32 min=0.9830552339553833 max=5.035177230834961
    [5.035177   3.32593    0.98305523]
    +ki='Ge_Gemmcst': (3, 4) (dtype=float32 min=-1.3049873113632202 max=1.1359702348709106
    [[-1.0145789   0.85326266 -1.3049873  -1.2548935 ]
     [ 1.1359702   0.08842168  0.9961545   1.0175261 ]
     [-0.05021989 -0.8833765   0.34773782  0.2815273 ]]
    +ki='Mu_Mulcst': (1,) (dtype=float32 min=0.0 max=0.0
    [0.]
    -kv='X' shape=(2, 4) dtype=float32 min=0.20000000298023224 max=5.099999904632568
    -- OnnxInference: run 8 nodes
    Onnx-Scaler(X) -> variable    (name='Scaler')
    +kr='variable': (2, 4) (dtype=float32 min=-1.340226411819458 max=1.0190045833587646)
    [[-0.9006812   1.0190046  -1.3402264  -1.3154442 ]
     [-1.1430167  -0.13197924 -1.3402264  -1.3154442 ]]
    Onnx-ReduceSumSquare(variable) -> Re_reduced0    (name='Re_ReduceSumSquare')
    +kr='Re_reduced0': (2, 1) (dtype=float32 min=4.850505828857422 max=5.376197338104248)
    [[5.3761973]
     [4.850506 ]]
    Onnx-Mul(Re_reduced0, Mu_Mulcst) -> Mu_C0    (name='Mu_Mul')
    +kr='Mu_C0': (2, 1) (dtype=float32 min=0.0 max=0.0)
    [[0.]
     [0.]]
    Onnx-Gemm(variable, Ge_Gemmcst, Mu_C0) -> Ge_Y0    (name='Ge_Gemm')
    +kr='Ge_Y0': (2, 3) (dtype=float32 min=-10.366023063659668 max=7.967349052429199)
    [[-10.366023    7.213233    3.3826268]
     [ -8.893578    7.967349    1.3247826]]
    Onnx-Add(Re_reduced0, Ge_Y0) -> Ad_C01    (name='Ad_Add')
    +kr='Ad_C01': (2, 3) (dtype=float32 min=-4.98982572555542 max=12.817854881286621)
    [[-4.9898257 12.58943    8.758824 ]
     [-4.0430717 12.817855   6.175288 ]]
    Onnx-Add(Ad_Addcst, Ad_C01) -> Ad_C0    (name='Ad_Add1')
    +kr='Ad_C0': (2, 3) (dtype=float32 min=0.045351505279541016 max=16.14378547668457)
    [[ 0.04535151 15.9153595   9.741879  ]
     [ 0.9921055  16.143785    7.1583433 ]]
    Onnx-ArgMin(Ad_C0) -> label    (name='Ar_ArgMin')
    +kr='label': (2,) (dtype=int64 min=0 max=0)
    [0 0]
    Onnx-Sqrt(Ad_C0) -> scores    (name='Sq_Sqrt')
    +kr='scores': (2, 3) (dtype=float32 min=0.2129589319229126 max=4.017932891845703)
    [[0.21295893 3.9894059  3.1211984 ]
     [0.99604493 4.017933   2.675508  ]]

    {'label': array([0, 0], dtype=int64), 'scores': array([[0.21295893, 3.9894059 , 3.1211984 ],
           [0.99604493, 4.017933  , 2.675508  ]], dtype=float32)}



.. GENERATED FROM PYTHON SOURCE LINES 119-121

Final graph
+++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 121-125

.. code-block:: default


    ax = plot_graphviz(oinf.to_dot())
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)



.. image:: /auto_tutorial/images/sphx_glr_plot_fbegin_investigate_001.png
    :alt: plot fbegin investigate
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.897 seconds)


.. _sphx_glr_download_auto_tutorial_plot_fbegin_investigate.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/onnx/onnx.ai/sklearn-onnx//master?filepath=auto_examples/auto_tutorial/plot_fbegin_investigate.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_fbegin_investigate.py <plot_fbegin_investigate.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_fbegin_investigate.ipynb <plot_fbegin_investigate.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
